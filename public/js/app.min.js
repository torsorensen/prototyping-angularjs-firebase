/**
	All module variables declared first with their injected moodules
	Attach all future filters/controllers/services to these variables
*/
var filters = angular.module('filters', []);

var services = angular.module("services", []);

var controllers = angular.module("controllers", ["services"]);

//var simpleLoginTools = angular.module('simpleLoginTools', []);

angular.module("templates", []);

var app = angular.module("app", [
	//"simpleLoginTools",
	"ngRoute", 
	"templates",
	"ngAnimate", 
	"controllers", 
	"firebase",
	"ngFileUpload"
]);


/**
	Firebase Setup
*/

var projectName = "...........#replace............";
var config = {
	apiKey: "...........#replace............",
	authDomain: "...........#replace............",
	databaseURL: "...........#replace............",
	storageBucket: "...........#replace............"
};
firebase.initializeApp(config);
controllers.controller("headerController",  function($scope, $route, $location, $timeout, $parse, dbService, eventService){
	
	$scope.showHeader = true;


	/** 
		Scope functions bound to view
	*/

	//Update menu selection according to routeProvider
 	$scope.isActive = function (viewLocation) { 
        return $location.path().indexOf(viewLocation) == 0;
    };


	/** 
		View click handlers
	*/

	$scope.onGotoItemsClicked = function() {
		console.log("UserCtrl: Goto Items clicked");
        eventService.broadcast("GOTO_ITEMS");
	}

	$scope.onGotoProfileClicked = function() {
		console.log("UserCtrl: Goto Profile clicked");
        eventService.broadcast("GOTO_PROFILE");
	}

	$scope.onGotoLogoutClicked = function() {
		console.log("UserCtrl: Goto Logout clicked");
        eventService.broadcast("LOGGED_OUT");
	}


	/** 
		Events
	*/
	
	eventService.listen("LOGGED_IN", function() {
		console.log("LOGGED_IN event received in headerController");
		$scope.showHeader = true;
	});

	eventService.listen("LOGGED_OUT", function() {
		console.log("LOGGED_OUT event received in headerController");
		$scope.showHeader = false;
	});

});
controllers.controller("itemController", function($rootScope, $scope, $routeParams, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, uploadService, offlineService){
	

	/**
		Functions bound to view
	*/

	$scope.isCreator = function() {
		if(!firebase.auth().currentUser) return;
		if(!$scope.syncObjectItem) return;

		var userId = $rootScope.userInfo.userId;
		return $scope.syncObjectItem.creatorId == userId;
	}


	/** 
		View click handlers
	*/

	$scope.onGotoItemsClicked = function() {
		$timeout(function(){
			eventService.broadcast("GOTO_ITEMS");
		}, 100);
	}

	$scope.onVoteClicked = function() {
		var success = function(){
			console.log("itemController: Vote success");
		};
		var data = { 
			vote :"up"
	    };
		var userId = $rootScope.userInfo.userId;
		dbService.setData("Items/"+itemId+"/voters/"+userId, data, success);
	}

	$scope.onDeleteClicked = function() {
		var success = function(){
			console.log("itemController: Remove item success");
			eventService.broadcast("GOTO_ITEMS");
		}
		dbService.removeData("Items/"+itemId, success);
	}

	$scope.onAddToOwnListClicked = function(item) {
		var success = function(){
			console.log("itemController: Added item to own list success");
		};

		//Copy some of the item details and store it with the same key as in the Items table
		var data = {};
		data[itemId] = {
			name : item.name,
			creator : item.creatorName,
			creatorId : item.creatorId,
	        timestamp: firebase.database.ServerValue.TIMESTAMP
		};
		var userId = $rootScope.userInfo.userId;
		dbService.updateData("Users/"+userId+"/ownItems", data, success);
	}

	$scope.onClearImageClicked = function() {
		console.log("itemController: cleaing image");

		$scope.picFile = "data/images/placeholder_submit.png";
		
		var success = function(){
			console.log("itemController: image cleared");
		};
		dbService.removeData("Items/"+itemId+"/image", success);
	}

	$scope.onUploadPic = function(file) {

		var extension = file.name.split('.').pop();
		var dir = "itemPictures";
		var filename =  itemId + "." + extension;

   	    uploadService.uploadImageToFirebaseStorage(file, filename, dir, onUploadSuccess, onUploadError, onUploadProgress);
    }


	/**
	 	Send updates to firebase
	*/

	var createFirebaseBindingsObject = function(scopeRefName, itemId) {

		if($scope.unbindCurrentItem) {
			console.log("Unbound previous current item three-way binding")
			$scope.unbindCurrentItem();
		}

		//AngularFire 3-way-bindings
		var currentItemRef = firebase.database().ref( "Items/"+itemId );
		var currentItemSyncObject = $firebaseObject(currentItemRef);
		currentItemSyncObject.$bindTo($scope, scopeRefName).then(function(unbind){
		    $scope.unbindCurrentItem = unbind;      
	    });

		var unwatchCurrentItem = currentItemSyncObject.$watch(watchCurrentItem); // at some time in the future, we can unregister using unwatchCurrentItem()

		console.log("itemController: AngularFire bound to itemId " + itemId);
	}

	var watchCurrentItem = function(event) {
		//console.log("Data changed " + JSON.stringify(e));
	}


	/**
		Callbacks
	*/

	var onUploadSuccess = function(url, filename) {
		console.log("itemController: Uploaded " + filename + " to Firebase. " + url);

		$scope.progress = 0;
        $scope.result = 200;

        var data = {
			filename: filename,
			url: url
		};
		var userId = firebase.auth().currentUser.uid;
		dbService.updateData("Items/"+itemId+"/image", data);
	}
	var onUploadError = function(error) {
	}
	var onUploadProgress = function(progress) {

		$timeout(function() {	
            $scope.progress = progress.toFixed(0);
            console.log("itemController: progress: " + $scope.progress + "% ");
 	    });
	}	


	/**
	 	Init
	*/
	
	console.log("itemController initialised");
	$scope.pageClass = 'page-item';

	//Retrieve itemId from route params
	var itemId = $routeParams.itemId;

	//Setup AngularFire 3-way-bindings (online) or read from cache (offline)
	if( offlineService.isOnline()) {
		console.log("itemController: Client online");
		createFirebaseBindingsObject("syncObjectItem", itemId);
	} 
	else {
		console.log("itemController: Client offline");

		//Find the item in cached items with the specific itemId
		var cachedItems = offlineService.getCachedItems();
		obj = _.find(cachedItems, function(obj) { 
			return obj.itemId == itemId }
		)
		$scope.syncObjectItem = obj;
	}

});
controllers.controller("itemsController", function($rootScope, $scope, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, offlineService){
		

	/**
		Functions bound to scope
	*/
		
	$scope.totalItemVotes = function(item) {
		var index = $scope.synchedItems.indexOf(item);

		var length = 0;
		if ($scope.synchedItems[index]["voters"]) {
			var votersArray = Object.keys($scope.synchedItems[index]["voters"]);
			length = votersArray.length;
		}
		
		return length;
	}


	/** 
		View click handlers
	*/

	$scope.onGotoItemClicked = function(itemId) {
		console.log("ItemsController: Clicked on item " + itemId);

		$timeout(function(){
			eventService.broadcast("GOTO_ITEM", itemId);
		}, 100);
	}

	$scope.onGotoProfileClicked = function(itemId) {
		console.log("ItemsController: Clicked on goto user");

		$timeout(function(){
			eventService.broadcast("GOTO_PROFILE");
		}, 100);
	}

	$scope.onCreateItemClicked = function() {
		$scope.synchedItems.$add({
	        name: "test",
	        creatorName: $rootScope.userInfo.name,
	        creatorId: $rootScope.userInfo.userId,
	        timestamp: firebase.database.ServerValue.TIMESTAMP
	    });
	}


	/** 
		Events
	*/
	
	eventService.listen("NEW_ITEM", function() {
		console.log("NEW_ITEM event received in itemCtrl");
		createNewItem();
	});

	
	eventService.listen("LOGGED_IN", function() {
		console.log("LOGGED_IN event received in itemsCtrl");
	});


	/**
	 	Watches
	*/

	$scope.$watch("synchedItems", function(newVal, oldVal) {
		if(!newVal) return;
		offlineService.setCachedItems( newVal );
	}, true);


	/**
	 	Send updates to firebase
	*/

	var createFirebaseBindingsArray = function() {
		var currentArrayRef = firebase.database().ref( "Items/" );
		$scope.synchedItems = $firebaseArray(currentArrayRef);
		
		console.log("itemsController: AngularFire bound to array Items");
	}	


	/**
	 	Init
	*/

	console.log("itemsController initialised");
	$scope.pageClass = 'page-items';

	//Setup AngularFire 3-way-bindings (online) or read from cache (offline)
	if( offlineService.isOnline()) {
		console.log("itemsController: Client online");
		createFirebaseBindingsArray();
	} 
	else {
		console.log("itemsController: Client offline");
		$scope.synchedItems = offlineService.getCachedItems();
	}
	

});
controllers.controller("loginController", function($scope, $parse, $timeout, dbService, eventService) {
	
	/** 
		View click handlers
	*/

	$scope.onKeyPressedLogin = function(event) {
	    if (event.keyCode == 13) { //enter
	         $scope.onLoginClicked();
	    };
	}

	$scope.onKeyPressedRegister = function(event) {
	    if (event.keyCode == 13) { //enter
	         $scope.onRegisterClicked();
	    };
	}

	$scope.onRegisterClicked = function() {
		console.log("REGISTER CLICKED " +$scope.email);

		var name = $scope.name;
		var email = $scope.email;
		var password = $scope.password;
		var password2 = $scope.password2;

		if(!name || name == "") {
			$scope.statusMsg = "Please provide your name";
			console.log("Please provide your name");
			return;
		}
		if(!login ||Â login == "") {
			$scope.statusMsg = "Please provide your email";
			console.log("Please provide your email");
			return;
		}
		if(!password || password == "") {
			$scope.statusMsg = "Please provide a password";
			console.log("Please provide a password");
			return;
		}
		if(!password2 || password2 == "") {
			$scope.statusMsg = "Please repeat your password";
			console.log("Please repeat your password");
			return;
		}
		if(password != password2) {
			$scope.statusMsg = "Passwords don't match";
			console.log("Passwords don't match");
			return;
		}

		$scope.statusMsg = "Registering... please wait.";
		
		//Register on client
		firebase.auth().createUserWithEmailAndPassword(email, password)
			.then(function(user) {
				
				var name = $scope.name; //user.displayNameÂ ||Â ;
				var email = user.email;
				var uid = user.uid;

				//Ask server to register the user data except password
				dbService.register(name, email, uid, completedRegistrationCallback, errorCallback);
			})
			.catch(function(error) {
				updateStatusMsg(error.message);
				console.log("Error register. ErrorCode: " + error.code);
			});
	}

	$scope.onLoginClicked = function() {
		console.log("LOG IN CLICKED");

		var login = $scope.email;
		var password = $scope.password;

		if(!login ||Â login == "") {
			$scope.statusMsg = "Please provide an email";
			console.log("Please provide an email");
			return;
		}
		if(!password || password == "") {
			$scope.statusMsg = "Please provide a password";
			console.log("Please provide a password");
			return;
		}

		$scope.statusMsg = "Logging in... please wait.";

		//Auth on client
		firebase.auth().signInWithEmailAndPassword(login, password)
			.catch(function(error) {
				updateStatusMsg(error.message);
				console.log("Error login. ErrorCode: " + error.code);
			});
	}

	$scope.onSendCodeClicked = function() {
		var forgot_email = $scope.email;
		
		if(!forgot_email ||forgot_email == "") {
			$scope.statusMsg = "Please provide an email";
			console.log("Please provide an email");
			return;
		}

		firebase.auth().sendPasswordResetEmail(forgot_email)
			.then(function() {
				updateStatusMsg("Password reset email sent");
			})
			.catch(function(error) {
				updateStatusMsg(error.message);
				console.log("Error sending pw. ErrorCode: " + error.code);
			});
	}

	// Goto Register button clicked
	$scope.onGotoRegisterClicked = function() {
		$timeout(function(){
			eventService.broadcast("GOTO_REGISTER");
		}, 100);
	}

	// Goto Register button clicked
	$scope.onGotoForgotClicked = function() {
		$timeout(function(){
			eventService.broadcast("GOTO_FORGOT");
		}, 100);
	}

	// Goto Register button clicked
	$scope.onGotoLoginClicked = function() {
		gotoLogin();
	}


	/**
		Helpers
	*/

	// Goto Register button clicked
	var gotoLogin = function() {
		$timeout(function(){
			eventService.broadcast("GOTO_LOGIN");
		}, 100);
	}

	var updateStatusMsg = function(msg) {
	    $scope.$apply(function () {
			$scope.statusMsg = msg;
        });
	}


	/**
		Callbacks from database service
	*/

	var completedRegistrationCallback = function() {
		console.log("LoginController: Registration with own Firebase table completed");
	}

	var errorCallback = function() {
		updateStatusMsg("LoginController: Error when trying to use own Firebase");
	}


	/** 
		Events
	*/

	eventService.listen("LOGGED_OUT", function() {
		console.log("LOGGED_OUT event received in loginController");

		firebase.auth().signOut().then(function() {
		  	console.log("LoginController: User signed out");
		}, function(error) {
		    console.log("LoginController: USER SIGNED OUT ERROR");
		});
	});


	/** 
		Init
	*/
	$scope.pageClass = 'page-login';

	// Auto-fill input fields to speed up testing
	//$scope.email = "torsorensen@gmail.com";
	//$scope.password = $scope.password2 = "passion";

	//This var holds the error msg bound to the view. It can only be updated from within async functions that use $scope.$apply
	$scope.statusMsg = "";

	
});

controllers.controller("navController",  function($rootScope, $scope, $timeout, $routeParams, $location, dbService, eventService, offlineService) {
	
	/** 
		View click handlers
	*/

	// Navbar Logout button clicked
	$scope.onLogoutClicked = function() {
		console.log("NavCtrl: Logout clicked");
        eventService.broadcast("LOGGED_OUT");
	}


	/** 
		Events
	*/
	
	eventService.listen("GOTO_REGISTER", function() {
		console.log("GOTO_REGISTER event received in navCtrl");
		navigateTo("register");
	});

	eventService.listen("GOTO_LOGIN", function() {
		console.log("GOTO_LOGIN event received in navCtrl");
		navigateTo("login");
	});

	eventService.listen("GOTO_FORGOT", function() {
		console.log("GOTO_FORGOT event received in navCtrl");
		navigateTo("forgot");
	});
	
	eventService.listen("GOTO_PROFILE", function(itemId) {
		console.log("GOTO_PROFILE event received in navCtrl");
		navigateTo("profile");
	});
	
	eventService.listen("GOTO_ITEMS", function() {
		console.log("GOTO_ITEMS event received in navCtrl");
		navigateTo("items");
	});
	
	eventService.listen("GOTO_ITEM", function(itemId) {
		console.log("GOTO_ITEM event received in navCtrl with extra " + itemId );
		navigateTo("items/" + itemId);
	});
	

	eventService.listen("LOGGED_IN", function() {
		console.log("LOGGED_IN event received in navCtrl " + $location + " " + $location.path() );
		
		//Navigate to path in URL bar (e.g. if link is copied or refreshed)
		if( $location.path() == "/" || $location.path() == "/login" || $location.path() == "/register") {
			navigateTo("items");
		}
		else {
			navigateTo( $location.path() );
		}		

		//Fetch user data
		if( offlineService.isOnline()) {
			var uid = firebase.auth().currentUser.uid;
			console.log("NavController: Client online. Fetching user data for uid " + uid);
			fetchUserData(uid);
		} 
		else {
			console.log("NavController: Client offline");
		}

	});

	eventService.listen("LOGGED_OUT", function() {
		console.log("LOGGED_OUT event received in navCtrl");
		navigateTo("login");
	});
	

	/** 
		Watches
	*/

	//Watch log in/out status
	firebase.auth().onAuthStateChanged(function(user) {
	  
	  if (user) {
		var user = firebase.auth().currentUser;
		if (user != null) {	

			$rootScope.auth = firebase.auth;

			var name = user.displayNameÂ  ||Â "NoDisplayName";
			var email = user.email 		 ||Â "NoEmail";
			var photoUrl = user.photoURLÂ ||Â "NoPhotoUrl";
			var uid = user.uid 			 ||Â "NoUserId";  
			var token = user.getToken()  || "NoToken"; 	// The user's ID, unique to the Firebase project. Do NOT use this value to authenticate with your backend server, if you have one. Use User.getToken() instead.
			
			console.log("NavController: User signed in: " + email + " " + name + " " + photoUrl + " " + uid + " token: " + token);

			eventService.broadcast("LOGGED_IN"); 
		}

	  } else {
	      console.log("NavController: No user signed in.");
	      eventService.broadcast("LOGGED_OUT");
	  }
	});


	/** 
		Helpers
	*/

	var navigateTo = function(state) { 
		$timeout(function() {
			console.log("NavController: Navigating to " + state);
			$location.path(state);
		});

		// Convert all potential emoji chars to img's
		twemoji.size = '16x16'; 
		twemoji.parse(document.body);
	}

	// Retrieve real user info based on id from client side
	var fetchUserData = function(uid) {
		dbService.getOnce("Users/"+uid, "value", processUserData, retrievedUserdataFromServer);
	}


	/**
		Callbacks from database service
	*/

	//Retrieve from db (called when user already logged in)
	var processUserData = function(dataSnapshot, callback){
		if(dataSnapshot.val) {
			var key = dataSnapshot.key;
			dataSnapshot = dataSnapshot.val();
			dataSnapshot.userId = key;
		}
		if(callback) callback(dataSnapshot);
	}

	var retrievedUserdataFromServer = function(obj) {
		console.log("NavController: User data retrieved from server and saved to rootScope");

		//Re-try in case a new user's data is not yet registered to firebase
		if(!obj) {
			console.log("Retrieving again ...");
			fetchUserData(firebase.auth().currentUser.uid);
			return;
		}

		var userId = obj.userId || -1;
		var name = obj.nameÂ ||Â "UnknownName"
		var email = obj.emailÂ ||Â "UnknownEmail";
		var username = name;

    	var userInfo = {
			"userId" : userId,
			"name" : name,
			"email" : email,
			"username" : username
		}
		$rootScope.userInfo = userInfo;

        var userItems = obj.userItems || {};

        var userItems = {
			"userItems" : userItems
		}
	    $rootScope.userItems = userItems;
	}

	//For front-end debugging of routes
	/*this.$route = $route;
    this.$location = $location;
    this.$routeParams = $routeParams;*/

    /* HTML Debugging fields for playing with ng-view
	<pre>$location.path() = {{navCtrl.$location.path()}}</pre>
	<pre>$route.current.templateUrl = {{navCtrl.$route.current.templateUrl}}</pre>
	<pre>$route.current.params = {{navCtrl.$route.current.params}}</pre>
	<pre>$routeParams = {{navCtrl.$routeParams}}</pre> */
	
});
controllers.controller("profileController", function($rootScope, $scope, $routeParams, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, uploadService, offlineService){

	/** 
		View click handlers
	*/


	$scope.onClearImageClicked = function() {
		console.log("profileController: cleaing image");

		$scope.picFile = "data/images/placeholder_submit.png";

		var success = function(){
			console.log("profileController: image cleared");
		};
		var userId = firebase.auth().currentUser.uid;
		dbService.removeData("Users/"+userId+"/profilePicture", success);
	}

	$scope.onUploadPic = function(file) {

		var userId = firebase.auth().currentUser.uid;
		var extension = file.name.split('.').pop();
		var dir = "profilePictures";
		var filename =  userId + "." + extension;

   	    uploadService.uploadImageToFirebaseStorage(file, filename, dir, onUploadSuccess, onUploadError, onUploadProgress);
    }


	/**
	 	Send updates to firebase
	*/

	var createFirebaseBindingsObject = function(scopeRefName) {

		if($scope.unbindCurrentItem) {
			console.log("Unbound previous current item three-way binding")
			$scope.unbindCurrentItem();
		}

		var userId = firebase.auth().currentUser.uid;

		//AngularFire 3-way-bindings
		var currentItemRef = firebase.database().ref( "Users/"+userId );
		var currentItemSyncObject = $firebaseObject(currentItemRef);
		currentItemSyncObject.$bindTo($scope, scopeRefName).then(function(unbind){
		    $scope.unbindCurrentItem = unbind;      
	    });

		var unwatchCurrentItem = currentItemSyncObject.$watch(watchCurrentItem); // at some time in the future, we can unregister using unwatchCurrentItem()

		console.log("profileController: AngularFire bound to userid " + userId);
	}

	var watchCurrentItem = function(event) {
		//console.log("Data changed " + JSON.stringify(e));
	}


	/**
	 	Watches
	*/

	$scope.$watch("syncObjectProfile", function(newVal, oldVal) {
		if(!newVal) return;
		offlineService.setCachedProfile( newVal );
	}, true);

	//Watch log in/out status so if user enters /profile directly, the bindings will be made
	firebase.auth().onAuthStateChanged(function(user) {
	  	
		//Return if already authed when initialising the controller
	  	if(authed) return;

	  	if (user) {
			var user = firebase.auth().currentUser;
			if (user != null) {	
				authed = true;
				createFirebaseBindingsObject("syncObjectProfile");
			}
		}

	});


	/**
		Callbacks
	*/

	var onUploadSuccess = function(url, filename) {
		console.log("profileController: Uploaded " + filename + " to Firebase. " + url);
		
		$scope.progress = 0;
        $scope.result = 200;

        var data = {
			filename: filename,
			url: url
		};
		var userId = firebase.auth().currentUser.uid;
		dbService.updateData("Users/"+userId+"/profilePicture", data);
	}
	var onUploadError = function(error) {
	}
	var onUploadProgress = function(progress) {

		$timeout(function() {			
            $scope.progress = progress.toFixed(0);
            console.log("uploadController: progress: " + $scope.progress + "% ");
 	    });
	}


    

	/**
	 	Init
	*/
	
	console.log("profileController initialised");
	$scope.pageClass = 'page-profile';

	//Boolean used if user enters /profile directly and auth doesn't have time to complete
	var authed = false;

	//Setup AngularFire 3-way-bindings (online) or read from cache (offline)
	if( offlineService.isOnline()) {
		console.log("profileController: Client online");

		if(firebase.auth().currentUser != null) {
			authed = true;
			createFirebaseBindingsObject("syncObjectProfile");
		}

	}  
	else {
		console.log("profileController: Client offline");
		$scope.syncObjectProfile = offlineService.getCachedProfile();
	}

});
app.directive('back', ['$window', function($window) {
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {
                elem.bind('click', function () {
                    $window.history.back();
                });
            }
        };
    }]);
/* 
Attach a key code to a controller function.
Usage: <input id="password" bind-key="onLoginClicked()" key="13"/>
http://stackoverflow.com/a/17364716 
*/
app.directive('bindKey', function() {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === Number(attrs.key)) {
                scope.$apply(function(){
                    scope.$eval(attrs.bindKey, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
});
app.directive('decimalInput', function() {
  return {
    require: '?ngModel',
    link: function(scope, element, attrs, ngModelCtrl) {
      if(!ngModelCtrl) {
        return; 
      }

      ngModelCtrl.$parsers.push(function(val) {
        if (angular.isUndefined(val)) {
            var val = '';
        }
        var clean = val.replace(/[^0-9\.]/g, '');
        
        var decimalCheck = clean.split('.');

        if(!angular.isUndefined(decimalCheck[1])) {
            decimalCheck[1] = decimalCheck[1].slice(0,2);
            clean =decimalCheck[0] + '.' + decimalCheck[1];
        }

        if (val !== clean) {
          ngModelCtrl.$setViewValue(clean);
          ngModelCtrl.$render();
        }
        if( isNaN(f) ) f = 0;

        var f = parseFloat(clean);
        return f;
      });

      element.bind('keypress', function(event) {
        if(event.keyCode === 32) {
          event.preventDefault();
        }
      });
    }
  };
})

//Shows typed letters, but removes them.
//Both command and dot are allowed
.directive('onlyFloats', function () {

    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.push(function (inputValue) {
                if (inputValue == undefined) return '';

                modelCtrl.$setViewValue(String(inputValue).replace(/,/g, '.')); //this line updates view, but it doesnt :/
                inputValue = String(inputValue).replace(/,/g, '.');

                var transformedInput = inputValue.replace(/[^0-9\.]/g, '');
                if (transformedInput !== inputValue) {
                    modelCtrl.$setViewValue(transformedInput);
                    modelCtrl.$render();
                }
                var floated = parseFloat(transformedInput);
                if(_.isNaN(floated)) floated = 0;
                return floated ;
            });
        }
    };
});
filters.filter('numberFixedLen', function () {
    return function (n, len) {
        var num = parseInt(n, 10);
        len = parseInt(len, 10);
        if (isNaN(num) || isNaN(len)) {
            return n;
        }
        num = ''+num;
        while (num.length < len) {
            num = '0'+num;
        }
        return num;
    };
});


 
/**
	Configure the Routes
*/

app.config(function($routeProvider, $locationProvider) {

	//Exclude from ng/animation	
	//$animateProvider.classNameFilter(/^((?!(picker-day)).)*$/); //To add several classes use pipe operator: elOrClass1|elOrClass2

	var titleSep = "|";
	var titleApp = "Angular Template";

	//Note. Dont ever route to index ;-)	
	//Note. There can only be one ng-view, so initially decide whether to apply it to the whole page or for the content container	
	$routeProvider
		.when("/", {
			controller: "loginController",
			title: "Login " + titleSep + " " + titleApp,
			templateUrl: "login.html",
	        reloadOnSearch: false
	    })

		.when("/register", {
			controller: "loginController",
			title: "Login " + titleSep + " " + titleApp,
			templateUrl: "register.html",
	        reloadOnSearch: false
	    })

		.when("/login", {
			controller: "loginController",
			title: "Login " + titleSep + " " + titleApp,
			templateUrl: "login.html",
	        reloadOnSearch: false
	    })

		.when("/forgot", {
			controller: "loginController",
			title: "Login " + titleSep + " " + titleApp,
			templateUrl: "forgot.html",
	        reloadOnSearch: false
	    })

		.when("/profile", {
			controller: "profileController",
			title: "Profile " + titleSep + " " + titleApp,
			templateUrl: "profile.html",
	        reloadOnSearch: false
	    })
		
		.when("/items", {
			controller: "itemsController",
			title: "Items " + titleSep + " " + titleApp,
			templateUrl: "items.html",
	        reloadOnSearch: false
	    })
		
		.when("/items/:itemId", {
			controller: "itemController",
			title: "Items " + titleSep + " " + titleApp,
			templateUrl: "item.html",
	        reloadOnSearch: false
	    })
		
		// else 404
		//.otherwise("/404", {templateUrl: "item.html"});
		.otherwise( {
	        redirectTo: "/login"
	    });

    $locationProvider.html5Mode(true);
})

//Update page title on route change
app.run(["$rootScope", "$route", function($rootScope, $route) {
    $rootScope.$on("$routeChangeSuccess", function() {
        document.title = $route.current.title;
    });
}]);
services.service("dbService", function($http, $q, eventService) {


	var svc = {};

	/**
		Firebase ref
	*/

	var dbRef = function(key) {
		return firebase.database().ref(key);
	}


	/**
		Firebase API access via server
	*/

	// Upon registration using Google Auth, let backend server save user data to own Firebase table
	svc.register = function(name, email, uid, completedRegistrationCallback, errorCallback) {
		console.log("DbService: Registering " + email + " and all user data with own server");
		var data =  {
			name : name,
			email : email,
			uid : uid
		};
		$http.post('/register', data).
	        success(function(resObj) {
	            console.log("Register posted successfully " + JSON.stringify(resObj));
	            completedRegistrationCallback();
	        }).error(function(resObj) {
	            console.error("Register posting error" + resObj);
	            errorCallback();
	        });
	}


	/**
		Firebase API access from client
	*/

	svc.getOnce = function(key, type, process, callback){
		console.log("DbService: Getting once: " + key);
		dbRef(key).once(type, function(dataSnapshot){
			if(process) process(dataSnapshot, callback); 
		}, errorFunc);
	}

	svc.getOnceWithChild = function(key, childKey, childVal, type, process, callback){
		console.log("DbService: Getting once with childKey " + childKey + ", childVal " + childVal);
		dbRef(key).orderByChild(childKey).equalTo(childVal).once(type, function(dataSnapshot){
			if(process) process(dataSnapshot, callback);
		}, errorFunc);
	}


	//Updates existing data array by adding to existing array
	svc.updateData = function(key, dataArr, callback){
		console.log("DbService: Updating " + key);
		dbRef(key).update(dataArr, function(error){
			if(error){
				errorFunc(error);
			}else{
				if(callback) callback();
			}
		});
	}
	
	//Sets existing data array by removing keys that are not existing anymore
	svc.setData = function(key, dataArr, callback){
		console.log("DbService: Setting at " + key);
		dbRef(key).set(dataArr, function(error){
			if(error){
				errorFunc(error);
			}else{
				if(callback) callback();
			}
		});
	}
	
	//Push and save the Firebase auto-generated id based on timestamp
	svc.pushData = function(key, dataArr, callback){
		console.log("DbService: Pushing data to " + key);
		var dbRef2 = dbRef(key).push();
		//var generatedId = dbRef2.key;
		//dataArr.itemId = generatedId;

		dbRef2.set(dataArr, function(error) {
			if(error){ errorFunc(error); }
			else{
				if(callback) callback(dataArr);
			}
		});
	}
	
	//Remove
	svc.removeData = function(key, callback){
		console.log("DbService: Removing at " + key);
		dbRef(key).remove(function(error){
			if(error){
				errorFunc(error);
			}else{
				if(callback) callback();
			}
		});
	}

	var errorFunc = function(errorObject){
		console.log(JSON.stringify(errorObject));
	}
	
	return svc;

});
services.service("eventService", function($rootScope) {
		
	this.broadcast = function(msg, extra) {
		$rootScope.$broadcast(msg, extra);
	}

	this.listen = function(msg, callback) { 
		$rootScope.$on( msg, function(msg, extra) { 
			callback(extra) 
		});
	}

});
services.service("offlineService", function($rootScope, dbService) {

    var svc = {};

    /**
        Private helpers
    */

   

    /**
        Public functions
    */

    // Is browser online? 
    svc.isOnline = function(){
        return navigator.onLine; 
    }

    // Browsers behave differently regarding navigator.onLine method above.
    // So if we really want to be sure about the state, we send a GET request to a local resource, that is not listed in the cache manifest
    // Note, that this answer is provided async and thus takes a moment to process, so be sure to handle the calling of this method correctly.
    svc.isReallyOnline = function(yes, no){
        var xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHttp');
        xhr.onload = function(){
            if(yes instanceof Function){
                yes();
            }
        }
        xhr.onerror = function(){
            if(no instanceof Function){
                no();
            }
        }
        xhr.open("GET","onlinetester.dont.add.to.cache.manifest",true);
        xhr.send();
    }

    svc.setLocalStorage = function(name, obj) {
        window.localStorage.setItem(name, JSON.stringify(obj));
    }

    svc.getLocalStorage = function(name) {
        return JSON.parse( window.localStorage.getItem(name) );
    }

    svc.setCachedProfile = function(obj) {
        svc.setLocalStorage("profile", obj);
    }

    svc.getCachedProfile = function() {
        return svc.getLocalStorage("profile");
    }

    svc.setCachedItems = function(obj) {
        svc.setLocalStorage("items", obj);
    }

    svc.getCachedItems = function() {
        return svc.getLocalStorage("items");
    }


    return svc;
});

services.service("uploadService", function(eventService) {

	var svc = {};

	/**
		Firebase ref
	*/

	var storageRef = function() {
		return firebase.storage().ref();
	}


	/**
		Firebase API access from client
	*/

	svc.uploadImageToFirebaseStorage = function(file, filename, dir, succeessCallback, errorCallback, progressCallback) {

        console.log("uploadController: Uploading to Firebase storage: " + filename + " to " + dir);

        //Get ref for new firebase storage location
		var uploadRef = storageRef().child(dir + "/" + filename);
		
		//Define internal callbacks
		var onProgress = function(snapshot) {
			
			var prog = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
			if(progressCallback) progressCallback(prog);

			switch (snapshot.state) {
				case firebase.storage.TaskState.PAUSED: 
				    console.log("Upload is PAUSED");
				    break;
				case firebase.storage.TaskState.RUNNING:
				    console.log("Upload is RUNNING");
				    break;
			}
		}
		var onError = function(error) {
			if(errorCallback) errorCallback(error);
		}
		var onSuccess = function() {
			var url = uploadTask.snapshot.downloadURL;
			if(succeessCallback) succeessCallback(url, filename);
		
		}

		//Upload file to Firebase
		uploadTask = uploadRef.put(file);

		//Monitor progress
		uploadTask.on('state_changed', onProgress, onError, onSuccess);

	}
	
	return svc;

});
//# sourceMappingURL=map/app.min.js.map
