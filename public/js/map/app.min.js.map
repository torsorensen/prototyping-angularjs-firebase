{"version":3,"sources":["init.js","controllers/headerController.js","controllers/itemController.js","controllers/itemsController.js","controllers/loginController.js","controllers/navController.js","controllers/profileController.js","directives/backButton.js","directives/bindKey.js","directives/inputNumbers.js","filters/filters.js","modules/app.js","services/dbService.js","services/eventService.js","services/offlineService.js","services/uploadService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrzrzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.min.js","sourcesContent":["/**\r\n\tAll module variables declared first with their injected moodules\r\n\tAttach all future filters/controllers/services to these variables\r\n*/\r\nvar filters = angular.module('filters', []);\r\n\r\nvar services = angular.module(\"services\", []);\r\n\r\nvar controllers = angular.module(\"controllers\", [\"services\"]);\r\n\r\n//var simpleLoginTools = angular.module('simpleLoginTools', []);\r\n\r\nangular.module(\"templates\", []);\r\n\r\nvar app = angular.module(\"app\", [\r\n\t//\"simpleLoginTools\",\r\n\t\"ngRoute\", \r\n\t\"templates\",\r\n\t\"ngAnimate\", \r\n\t\"controllers\", \r\n\t\"firebase\",\r\n\t\"ngFileUpload\"\r\n]);\r\n\r\n\r\n/**\r\n\tFirebase Setup\r\n*/\r\n\r\nvar projectName = \"...........#replace............\";\r\nvar config = {\r\n\tapiKey: \"...........#replace............\",\r\n\tauthDomain: \"...........#replace............\",\r\n\tdatabaseURL: \"...........#replace............\",\r\n\tstorageBucket: \"...........#replace............\"\r\n};\r\nfirebase.initializeApp(config);","controllers.controller(\"headerController\",  function($scope, $route, $location, $timeout, $parse, dbService, eventService){\r\n\t\r\n\t$scope.showHeader = true;\r\n\r\n\r\n\t/** \r\n\t\tScope functions bound to view\r\n\t*/\r\n\r\n\t//Update menu selection according to routeProvider\r\n \t$scope.isActive = function (viewLocation) { \r\n        return $location.path().indexOf(viewLocation) == 0;\r\n    };\r\n\r\n\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\t$scope.onGotoItemsClicked = function() {\r\n\t\tconsole.log(\"UserCtrl: Goto Items clicked\");\r\n        eventService.broadcast(\"GOTO_ITEMS\");\r\n\t}\r\n\r\n\t$scope.onGotoProfileClicked = function() {\r\n\t\tconsole.log(\"UserCtrl: Goto Profile clicked\");\r\n        eventService.broadcast(\"GOTO_PROFILE\");\r\n\t}\r\n\r\n\t$scope.onGotoLogoutClicked = function() {\r\n\t\tconsole.log(\"UserCtrl: Goto Logout clicked\");\r\n        eventService.broadcast(\"LOGGED_OUT\");\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tEvents\r\n\t*/\r\n\t\r\n\teventService.listen(\"LOGGED_IN\", function() {\r\n\t\tconsole.log(\"LOGGED_IN event received in headerController\");\r\n\t\t$scope.showHeader = true;\r\n\t});\r\n\r\n\teventService.listen(\"LOGGED_OUT\", function() {\r\n\t\tconsole.log(\"LOGGED_OUT event received in headerController\");\r\n\t\t$scope.showHeader = false;\r\n\t});\r\n\r\n});","controllers.controller(\"itemController\", function($rootScope, $scope, $routeParams, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, uploadService, offlineService){\r\n\t\r\n\r\n\t/**\r\n\t\tFunctions bound to view\r\n\t*/\r\n\r\n\t$scope.isCreator = function() {\r\n\t\tif(!firebase.auth().currentUser) return;\r\n\t\tif(!$scope.syncObjectItem) return;\r\n\r\n\t\tvar userId = $rootScope.userInfo.userId;\r\n\t\treturn $scope.syncObjectItem.creatorId == userId;\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\t$scope.onGotoItemsClicked = function() {\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_ITEMS\");\r\n\t\t}, 100);\r\n\t}\r\n\r\n\t$scope.onVoteClicked = function() {\r\n\t\tvar success = function(){\r\n\t\t\tconsole.log(\"itemController: Vote success\");\r\n\t\t};\r\n\t\tvar data = { \r\n\t\t\tvote :\"up\"\r\n\t    };\r\n\t\tvar userId = $rootScope.userInfo.userId;\r\n\t\tdbService.setData(\"Items/\"+itemId+\"/voters/\"+userId, data, success);\r\n\t}\r\n\r\n\t$scope.onDeleteClicked = function() {\r\n\t\tvar success = function(){\r\n\t\t\tconsole.log(\"itemController: Remove item success\");\r\n\t\t\teventService.broadcast(\"GOTO_ITEMS\");\r\n\t\t}\r\n\t\tdbService.removeData(\"Items/\"+itemId, success);\r\n\t}\r\n\r\n\t$scope.onAddToOwnListClicked = function(item) {\r\n\t\tvar success = function(){\r\n\t\t\tconsole.log(\"itemController: Added item to own list success\");\r\n\t\t};\r\n\r\n\t\t//Copy some of the item details and store it with the same key as in the Items table\r\n\t\tvar data = {};\r\n\t\tdata[itemId] = {\r\n\t\t\tname : item.name,\r\n\t\t\tcreator : item.creatorName,\r\n\t\t\tcreatorId : item.creatorId,\r\n\t        timestamp: firebase.database.ServerValue.TIMESTAMP\r\n\t\t};\r\n\t\tvar userId = $rootScope.userInfo.userId;\r\n\t\tdbService.updateData(\"Users/\"+userId+\"/ownItems\", data, success);\r\n\t}\r\n\r\n\t$scope.onClearImageClicked = function() {\r\n\t\tconsole.log(\"itemController: cleaing image\");\r\n\r\n\t\t$scope.picFile = \"data/images/placeholder_submit.png\";\r\n\t\t\r\n\t\tvar success = function(){\r\n\t\t\tconsole.log(\"itemController: image cleared\");\r\n\t\t};\r\n\t\tdbService.removeData(\"Items/\"+itemId+\"/image\", success);\r\n\t}\r\n\r\n\t$scope.onUploadPic = function(file) {\r\n\r\n\t\tvar extension = file.name.split('.').pop();\r\n\t\tvar dir = \"itemPictures\";\r\n\t\tvar filename =  itemId + \".\" + extension;\r\n\r\n   \t    uploadService.uploadImageToFirebaseStorage(file, filename, dir, onUploadSuccess, onUploadError, onUploadProgress);\r\n    }\r\n\r\n\r\n\t/**\r\n\t \tSend updates to firebase\r\n\t*/\r\n\r\n\tvar createFirebaseBindingsObject = function(scopeRefName, itemId) {\r\n\r\n\t\tif($scope.unbindCurrentItem) {\r\n\t\t\tconsole.log(\"Unbound previous current item three-way binding\")\r\n\t\t\t$scope.unbindCurrentItem();\r\n\t\t}\r\n\r\n\t\t//AngularFire 3-way-bindings\r\n\t\tvar currentItemRef = firebase.database().ref( \"Items/\"+itemId );\r\n\t\tvar currentItemSyncObject = $firebaseObject(currentItemRef);\r\n\t\tcurrentItemSyncObject.$bindTo($scope, scopeRefName).then(function(unbind){\r\n\t\t    $scope.unbindCurrentItem = unbind;      \r\n\t    });\r\n\r\n\t\tvar unwatchCurrentItem = currentItemSyncObject.$watch(watchCurrentItem); // at some time in the future, we can unregister using unwatchCurrentItem()\r\n\r\n\t\tconsole.log(\"itemController: AngularFire bound to itemId \" + itemId);\r\n\t}\r\n\r\n\tvar watchCurrentItem = function(event) {\r\n\t\t//console.log(\"Data changed \" + JSON.stringify(e));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tCallbacks\r\n\t*/\r\n\r\n\tvar onUploadSuccess = function(url, filename) {\r\n\t\tconsole.log(\"itemController: Uploaded \" + filename + \" to Firebase. \" + url);\r\n\r\n\t\t$scope.progress = 0;\r\n        $scope.result = 200;\r\n\r\n        var data = {\r\n\t\t\tfilename: filename,\r\n\t\t\turl: url\r\n\t\t};\r\n\t\tvar userId = firebase.auth().currentUser.uid;\r\n\t\tdbService.updateData(\"Items/\"+itemId+\"/image\", data);\r\n\t}\r\n\tvar onUploadError = function(error) {\r\n\t}\r\n\tvar onUploadProgress = function(progress) {\r\n\r\n\t\t$timeout(function() {\t\r\n            $scope.progress = progress.toFixed(0);\r\n            console.log(\"itemController: progress: \" + $scope.progress + \"% \");\r\n \t    });\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t \tInit\r\n\t*/\r\n\t\r\n\tconsole.log(\"itemController initialised\");\r\n\t$scope.pageClass = 'page-item';\r\n\r\n\t//Retrieve itemId from route params\r\n\tvar itemId = $routeParams.itemId;\r\n\r\n\t//Setup AngularFire 3-way-bindings (online) or read from cache (offline)\r\n\tif( offlineService.isOnline()) {\r\n\t\tconsole.log(\"itemController: Client online\");\r\n\t\tcreateFirebaseBindingsObject(\"syncObjectItem\", itemId);\r\n\t} \r\n\telse {\r\n\t\tconsole.log(\"itemController: Client offline\");\r\n\r\n\t\t//Find the item in cached items with the specific itemId\r\n\t\tvar cachedItems = offlineService.getCachedItems();\r\n\t\tobj = _.find(cachedItems, function(obj) { \r\n\t\t\treturn obj.itemId == itemId }\r\n\t\t)\r\n\t\t$scope.syncObjectItem = obj;\r\n\t}\r\n\r\n});","controllers.controller(\"itemsController\", function($rootScope, $scope, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, offlineService){\r\n\t\t\r\n\r\n\t/**\r\n\t\tFunctions bound to scope\r\n\t*/\r\n\t\t\r\n\t$scope.totalItemVotes = function(item) {\r\n\t\tvar index = $scope.synchedItems.indexOf(item);\r\n\r\n\t\tvar length = 0;\r\n\t\tif ($scope.synchedItems[index][\"voters\"]) {\r\n\t\t\tvar votersArray = Object.keys($scope.synchedItems[index][\"voters\"]);\r\n\t\t\tlength = votersArray.length;\r\n\t\t}\r\n\t\t\r\n\t\treturn length;\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\t$scope.onGotoItemClicked = function(itemId) {\r\n\t\tconsole.log(\"ItemsController: Clicked on item \" + itemId);\r\n\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_ITEM\", itemId);\r\n\t\t}, 100);\r\n\t}\r\n\r\n\t$scope.onGotoProfileClicked = function(itemId) {\r\n\t\tconsole.log(\"ItemsController: Clicked on goto user\");\r\n\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_PROFILE\");\r\n\t\t}, 100);\r\n\t}\r\n\r\n\t$scope.onCreateItemClicked = function() {\r\n\t\t$scope.synchedItems.$add({\r\n\t        name: \"test\",\r\n\t        creatorName: $rootScope.userInfo.name,\r\n\t        creatorId: $rootScope.userInfo.userId,\r\n\t        timestamp: firebase.database.ServerValue.TIMESTAMP\r\n\t    });\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tEvents\r\n\t*/\r\n\t\r\n\teventService.listen(\"NEW_ITEM\", function() {\r\n\t\tconsole.log(\"NEW_ITEM event received in itemCtrl\");\r\n\t\tcreateNewItem();\r\n\t});\r\n\r\n\t\r\n\teventService.listen(\"LOGGED_IN\", function() {\r\n\t\tconsole.log(\"LOGGED_IN event received in itemsCtrl\");\r\n\t});\r\n\r\n\r\n\t/**\r\n\t \tWatches\r\n\t*/\r\n\r\n\t$scope.$watch(\"synchedItems\", function(newVal, oldVal) {\r\n\t\tif(!newVal) return;\r\n\t\tofflineService.setCachedItems( newVal );\r\n\t}, true);\r\n\r\n\r\n\t/**\r\n\t \tSend updates to firebase\r\n\t*/\r\n\r\n\tvar createFirebaseBindingsArray = function() {\r\n\t\tvar currentArrayRef = firebase.database().ref( \"Items/\" );\r\n\t\t$scope.synchedItems = $firebaseArray(currentArrayRef);\r\n\t\t\r\n\t\tconsole.log(\"itemsController: AngularFire bound to array Items\");\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t \tInit\r\n\t*/\r\n\r\n\tconsole.log(\"itemsController initialised\");\r\n\t$scope.pageClass = 'page-items';\r\n\r\n\t//Setup AngularFire 3-way-bindings (online) or read from cache (offline)\r\n\tif( offlineService.isOnline()) {\r\n\t\tconsole.log(\"itemsController: Client online\");\r\n\t\tcreateFirebaseBindingsArray();\r\n\t} \r\n\telse {\r\n\t\tconsole.log(\"itemsController: Client offline\");\r\n\t\t$scope.synchedItems = offlineService.getCachedItems();\r\n\t}\r\n\t\r\n\r\n});","controllers.controller(\"loginController\", function($scope, $parse, $timeout, dbService, eventService) {\r\n\t\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\t$scope.onKeyPressedLogin = function(event) {\r\n\t    if (event.keyCode == 13) { //enter\r\n\t         $scope.onLoginClicked();\r\n\t    };\r\n\t}\r\n\r\n\t$scope.onKeyPressedRegister = function(event) {\r\n\t    if (event.keyCode == 13) { //enter\r\n\t         $scope.onRegisterClicked();\r\n\t    };\r\n\t}\r\n\r\n\t$scope.onRegisterClicked = function() {\r\n\t\tconsole.log(\"REGISTER CLICKED \" +$scope.email);\r\n\r\n\t\tvar name = $scope.name;\r\n\t\tvar email = $scope.email;\r\n\t\tvar password = $scope.password;\r\n\t\tvar password2 = $scope.password2;\r\n\r\n\t\tif(!name || name == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide your name\";\r\n\t\t\tconsole.log(\"Please provide your name\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!login || login == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide your email\";\r\n\t\t\tconsole.log(\"Please provide your email\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!password || password == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide a password\";\r\n\t\t\tconsole.log(\"Please provide a password\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!password2 || password2 == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please repeat your password\";\r\n\t\t\tconsole.log(\"Please repeat your password\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(password != password2) {\r\n\t\t\t$scope.statusMsg = \"Passwords don't match\";\r\n\t\t\tconsole.log(\"Passwords don't match\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t$scope.statusMsg = \"Registering... please wait.\";\r\n\t\t\r\n\t\t//Register on client\r\n\t\tfirebase.auth().createUserWithEmailAndPassword(email, password)\r\n\t\t\t.then(function(user) {\r\n\t\t\t\t\r\n\t\t\t\tvar name = $scope.name; //user.displayName || ;\r\n\t\t\t\tvar email = user.email;\r\n\t\t\t\tvar uid = user.uid;\r\n\r\n\t\t\t\t//Ask server to register the user data except password\r\n\t\t\t\tdbService.register(name, email, uid, completedRegistrationCallback, errorCallback);\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tupdateStatusMsg(error.message);\r\n\t\t\t\tconsole.log(\"Error register. ErrorCode: \" + error.code);\r\n\t\t\t});\r\n\t}\r\n\r\n\t$scope.onLoginClicked = function() {\r\n\t\tconsole.log(\"LOG IN CLICKED\");\r\n\r\n\t\tvar login = $scope.email;\r\n\t\tvar password = $scope.password;\r\n\r\n\t\tif(!login || login == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide an email\";\r\n\t\t\tconsole.log(\"Please provide an email\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!password || password == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide a password\";\r\n\t\t\tconsole.log(\"Please provide a password\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t$scope.statusMsg = \"Logging in... please wait.\";\r\n\r\n\t\t//Auth on client\r\n\t\tfirebase.auth().signInWithEmailAndPassword(login, password)\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tupdateStatusMsg(error.message);\r\n\t\t\t\tconsole.log(\"Error login. ErrorCode: \" + error.code);\r\n\t\t\t});\r\n\t}\r\n\r\n\t$scope.onSendCodeClicked = function() {\r\n\t\tvar forgot_email = $scope.email;\r\n\t\t\r\n\t\tif(!forgot_email ||forgot_email == \"\") {\r\n\t\t\t$scope.statusMsg = \"Please provide an email\";\r\n\t\t\tconsole.log(\"Please provide an email\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfirebase.auth().sendPasswordResetEmail(forgot_email)\r\n\t\t\t.then(function() {\r\n\t\t\t\tupdateStatusMsg(\"Password reset email sent\");\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tupdateStatusMsg(error.message);\r\n\t\t\t\tconsole.log(\"Error sending pw. ErrorCode: \" + error.code);\r\n\t\t\t});\r\n\t}\r\n\r\n\t// Goto Register button clicked\r\n\t$scope.onGotoRegisterClicked = function() {\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_REGISTER\");\r\n\t\t}, 100);\r\n\t}\r\n\r\n\t// Goto Register button clicked\r\n\t$scope.onGotoForgotClicked = function() {\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_FORGOT\");\r\n\t\t}, 100);\r\n\t}\r\n\r\n\t// Goto Register button clicked\r\n\t$scope.onGotoLoginClicked = function() {\r\n\t\tgotoLogin();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tHelpers\r\n\t*/\r\n\r\n\t// Goto Register button clicked\r\n\tvar gotoLogin = function() {\r\n\t\t$timeout(function(){\r\n\t\t\teventService.broadcast(\"GOTO_LOGIN\");\r\n\t\t}, 100);\r\n\t}\r\n\r\n\tvar updateStatusMsg = function(msg) {\r\n\t    $scope.$apply(function () {\r\n\t\t\t$scope.statusMsg = msg;\r\n        });\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tCallbacks from database service\r\n\t*/\r\n\r\n\tvar completedRegistrationCallback = function() {\r\n\t\tconsole.log(\"LoginController: Registration with own Firebase table completed\");\r\n\t}\r\n\r\n\tvar errorCallback = function() {\r\n\t\tupdateStatusMsg(\"LoginController: Error when trying to use own Firebase\");\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tEvents\r\n\t*/\r\n\r\n\teventService.listen(\"LOGGED_OUT\", function() {\r\n\t\tconsole.log(\"LOGGED_OUT event received in loginController\");\r\n\r\n\t\tfirebase.auth().signOut().then(function() {\r\n\t\t  \tconsole.log(\"LoginController: User signed out\");\r\n\t\t}, function(error) {\r\n\t\t    console.log(\"LoginController: USER SIGNED OUT ERROR\");\r\n\t\t});\r\n\t});\r\n\r\n\r\n\t/** \r\n\t\tInit\r\n\t*/\r\n\t$scope.pageClass = 'page-login';\r\n\r\n\t// Auto-fill input fields to speed up testing\r\n\t//$scope.email = \"torsorensen@gmail.com\";\r\n\t//$scope.password = $scope.password2 = \"passion\";\r\n\r\n\t//This var holds the error msg bound to the view. It can only be updated from within async functions that use $scope.$apply\r\n\t$scope.statusMsg = \"\";\r\n\r\n\t\r\n});\r\n","controllers.controller(\"navController\",  function($rootScope, $scope, $timeout, $routeParams, $location, dbService, eventService, offlineService) {\r\n\t\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\t// Navbar Logout button clicked\r\n\t$scope.onLogoutClicked = function() {\r\n\t\tconsole.log(\"NavCtrl: Logout clicked\");\r\n        eventService.broadcast(\"LOGGED_OUT\");\r\n\t}\r\n\r\n\r\n\t/** \r\n\t\tEvents\r\n\t*/\r\n\t\r\n\teventService.listen(\"GOTO_REGISTER\", function() {\r\n\t\tconsole.log(\"GOTO_REGISTER event received in navCtrl\");\r\n\t\tnavigateTo(\"register\");\r\n\t});\r\n\r\n\teventService.listen(\"GOTO_LOGIN\", function() {\r\n\t\tconsole.log(\"GOTO_LOGIN event received in navCtrl\");\r\n\t\tnavigateTo(\"login\");\r\n\t});\r\n\r\n\teventService.listen(\"GOTO_FORGOT\", function() {\r\n\t\tconsole.log(\"GOTO_FORGOT event received in navCtrl\");\r\n\t\tnavigateTo(\"forgot\");\r\n\t});\r\n\t\r\n\teventService.listen(\"GOTO_PROFILE\", function(itemId) {\r\n\t\tconsole.log(\"GOTO_PROFILE event received in navCtrl\");\r\n\t\tnavigateTo(\"profile\");\r\n\t});\r\n\t\r\n\teventService.listen(\"GOTO_ITEMS\", function() {\r\n\t\tconsole.log(\"GOTO_ITEMS event received in navCtrl\");\r\n\t\tnavigateTo(\"items\");\r\n\t});\r\n\t\r\n\teventService.listen(\"GOTO_ITEM\", function(itemId) {\r\n\t\tconsole.log(\"GOTO_ITEM event received in navCtrl with extra \" + itemId );\r\n\t\tnavigateTo(\"items/\" + itemId);\r\n\t});\r\n\t\r\n\r\n\teventService.listen(\"LOGGED_IN\", function() {\r\n\t\tconsole.log(\"LOGGED_IN event received in navCtrl \" + $location + \" \" + $location.path() );\r\n\t\t\r\n\t\t//Navigate to path in URL bar (e.g. if link is copied or refreshed)\r\n\t\tif( $location.path() == \"/\" || $location.path() == \"/login\" || $location.path() == \"/register\") {\r\n\t\t\tnavigateTo(\"items\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnavigateTo( $location.path() );\r\n\t\t}\t\t\r\n\r\n\t\t//Fetch user data\r\n\t\tif( offlineService.isOnline()) {\r\n\t\t\tvar uid = firebase.auth().currentUser.uid;\r\n\t\t\tconsole.log(\"NavController: Client online. Fetching user data for uid \" + uid);\r\n\t\t\tfetchUserData(uid);\r\n\t\t} \r\n\t\telse {\r\n\t\t\tconsole.log(\"NavController: Client offline\");\r\n\t\t}\r\n\r\n\t});\r\n\r\n\teventService.listen(\"LOGGED_OUT\", function() {\r\n\t\tconsole.log(\"LOGGED_OUT event received in navCtrl\");\r\n\t\tnavigateTo(\"login\");\r\n\t});\r\n\t\r\n\r\n\t/** \r\n\t\tWatches\r\n\t*/\r\n\r\n\t//Watch log in/out status\r\n\tfirebase.auth().onAuthStateChanged(function(user) {\r\n\t  \r\n\t  if (user) {\r\n\t\tvar user = firebase.auth().currentUser;\r\n\t\tif (user != null) {\t\r\n\r\n\t\t\t$rootScope.auth = firebase.auth;\r\n\r\n\t\t\tvar name = user.displayName  || \"NoDisplayName\";\r\n\t\t\tvar email = user.email \t\t || \"NoEmail\";\r\n\t\t\tvar photoUrl = user.photoURL || \"NoPhotoUrl\";\r\n\t\t\tvar uid = user.uid \t\t\t || \"NoUserId\";  \r\n\t\t\tvar token = user.getToken()  || \"NoToken\"; \t// The user's ID, unique to the Firebase project. Do NOT use this value to authenticate with your backend server, if you have one. Use User.getToken() instead.\r\n\t\t\t\r\n\t\t\tconsole.log(\"NavController: User signed in: \" + email + \" \" + name + \" \" + photoUrl + \" \" + uid + \" token: \" + token);\r\n\r\n\t\t\teventService.broadcast(\"LOGGED_IN\"); \r\n\t\t}\r\n\r\n\t  } else {\r\n\t      console.log(\"NavController: No user signed in.\");\r\n\t      eventService.broadcast(\"LOGGED_OUT\");\r\n\t  }\r\n\t});\r\n\r\n\r\n\t/** \r\n\t\tHelpers\r\n\t*/\r\n\r\n\tvar navigateTo = function(state) { \r\n\t\t$timeout(function() {\r\n\t\t\tconsole.log(\"NavController: Navigating to \" + state);\r\n\t\t\t$location.path(state);\r\n\t\t});\r\n\r\n\t\t// Convert all potential emoji chars to img's\r\n\t\ttwemoji.size = '16x16'; \r\n\t\ttwemoji.parse(document.body);\r\n\t}\r\n\r\n\t// Retrieve real user info based on id from client side\r\n\tvar fetchUserData = function(uid) {\r\n\t\tdbService.getOnce(\"Users/\"+uid, \"value\", processUserData, retrievedUserdataFromServer);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tCallbacks from database service\r\n\t*/\r\n\r\n\t//Retrieve from db (called when user already logged in)\r\n\tvar processUserData = function(dataSnapshot, callback){\r\n\t\tif(dataSnapshot.val) {\r\n\t\t\tvar key = dataSnapshot.key;\r\n\t\t\tdataSnapshot = dataSnapshot.val();\r\n\t\t\tdataSnapshot.userId = key;\r\n\t\t}\r\n\t\tif(callback) callback(dataSnapshot);\r\n\t}\r\n\r\n\tvar retrievedUserdataFromServer = function(obj) {\r\n\t\tconsole.log(\"NavController: User data retrieved from server and saved to rootScope\");\r\n\r\n\t\t//Re-try in case a new user's data is not yet registered to firebase\r\n\t\tif(!obj) {\r\n\t\t\tconsole.log(\"Retrieving again ...\");\r\n\t\t\tfetchUserData(firebase.auth().currentUser.uid);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar userId = obj.userId || -1;\r\n\t\tvar name = obj.name || \"UnknownName\"\r\n\t\tvar email = obj.email || \"UnknownEmail\";\r\n\t\tvar username = name;\r\n\r\n    \tvar userInfo = {\r\n\t\t\t\"userId\" : userId,\r\n\t\t\t\"name\" : name,\r\n\t\t\t\"email\" : email,\r\n\t\t\t\"username\" : username\r\n\t\t}\r\n\t\t$rootScope.userInfo = userInfo;\r\n\r\n        var userItems = obj.userItems || {};\r\n\r\n        var userItems = {\r\n\t\t\t\"userItems\" : userItems\r\n\t\t}\r\n\t    $rootScope.userItems = userItems;\r\n\t}\r\n\r\n\t//For front-end debugging of routes\r\n\t/*this.$route = $route;\r\n    this.$location = $location;\r\n    this.$routeParams = $routeParams;*/\r\n\r\n    /* HTML Debugging fields for playing with ng-view\r\n\t<pre>$location.path() = {{navCtrl.$location.path()}}</pre>\r\n\t<pre>$route.current.templateUrl = {{navCtrl.$route.current.templateUrl}}</pre>\r\n\t<pre>$route.current.params = {{navCtrl.$route.current.params}}</pre>\r\n\t<pre>$routeParams = {{navCtrl.$routeParams}}</pre> */\r\n\t\r\n});","controllers.controller(\"profileController\", function($rootScope, $scope, $routeParams, $timeout, $parse, $firebaseObject, $firebaseArray, eventService, dbService, uploadService, offlineService){\r\n\r\n\t/** \r\n\t\tView click handlers\r\n\t*/\r\n\r\n\r\n\t$scope.onClearImageClicked = function() {\r\n\t\tconsole.log(\"profileController: cleaing image\");\r\n\r\n\t\t$scope.picFile = \"data/images/placeholder_submit.png\";\r\n\r\n\t\tvar success = function(){\r\n\t\t\tconsole.log(\"profileController: image cleared\");\r\n\t\t};\r\n\t\tvar userId = firebase.auth().currentUser.uid;\r\n\t\tdbService.removeData(\"Users/\"+userId+\"/profilePicture\", success);\r\n\t}\r\n\r\n\t$scope.onUploadPic = function(file) {\r\n\r\n\t\tvar userId = firebase.auth().currentUser.uid;\r\n\t\tvar extension = file.name.split('.').pop();\r\n\t\tvar dir = \"profilePictures\";\r\n\t\tvar filename =  userId + \".\" + extension;\r\n\r\n   \t    uploadService.uploadImageToFirebaseStorage(file, filename, dir, onUploadSuccess, onUploadError, onUploadProgress);\r\n    }\r\n\r\n\r\n\t/**\r\n\t \tSend updates to firebase\r\n\t*/\r\n\r\n\tvar createFirebaseBindingsObject = function(scopeRefName) {\r\n\r\n\t\tif($scope.unbindCurrentItem) {\r\n\t\t\tconsole.log(\"Unbound previous current item three-way binding\")\r\n\t\t\t$scope.unbindCurrentItem();\r\n\t\t}\r\n\r\n\t\tvar userId = firebase.auth().currentUser.uid;\r\n\r\n\t\t//AngularFire 3-way-bindings\r\n\t\tvar currentItemRef = firebase.database().ref( \"Users/\"+userId );\r\n\t\tvar currentItemSyncObject = $firebaseObject(currentItemRef);\r\n\t\tcurrentItemSyncObject.$bindTo($scope, scopeRefName).then(function(unbind){\r\n\t\t    $scope.unbindCurrentItem = unbind;      \r\n\t    });\r\n\r\n\t\tvar unwatchCurrentItem = currentItemSyncObject.$watch(watchCurrentItem); // at some time in the future, we can unregister using unwatchCurrentItem()\r\n\r\n\t\tconsole.log(\"profileController: AngularFire bound to userid \" + userId);\r\n\t}\r\n\r\n\tvar watchCurrentItem = function(event) {\r\n\t\t//console.log(\"Data changed \" + JSON.stringify(e));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t \tWatches\r\n\t*/\r\n\r\n\t$scope.$watch(\"syncObjectProfile\", function(newVal, oldVal) {\r\n\t\tif(!newVal) return;\r\n\t\tofflineService.setCachedProfile( newVal );\r\n\t}, true);\r\n\r\n\t//Watch log in/out status so if user enters /profile directly, the bindings will be made\r\n\tfirebase.auth().onAuthStateChanged(function(user) {\r\n\t  \t\r\n\t\t//Return if already authed when initialising the controller\r\n\t  \tif(authed) return;\r\n\r\n\t  \tif (user) {\r\n\t\t\tvar user = firebase.auth().currentUser;\r\n\t\t\tif (user != null) {\t\r\n\t\t\t\tauthed = true;\r\n\t\t\t\tcreateFirebaseBindingsObject(\"syncObjectProfile\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\t/**\r\n\t\tCallbacks\r\n\t*/\r\n\r\n\tvar onUploadSuccess = function(url, filename) {\r\n\t\tconsole.log(\"profileController: Uploaded \" + filename + \" to Firebase. \" + url);\r\n\t\t\r\n\t\t$scope.progress = 0;\r\n        $scope.result = 200;\r\n\r\n        var data = {\r\n\t\t\tfilename: filename,\r\n\t\t\turl: url\r\n\t\t};\r\n\t\tvar userId = firebase.auth().currentUser.uid;\r\n\t\tdbService.updateData(\"Users/\"+userId+\"/profilePicture\", data);\r\n\t}\r\n\tvar onUploadError = function(error) {\r\n\t}\r\n\tvar onUploadProgress = function(progress) {\r\n\r\n\t\t$timeout(function() {\t\t\t\r\n            $scope.progress = progress.toFixed(0);\r\n            console.log(\"uploadController: progress: \" + $scope.progress + \"% \");\r\n \t    });\r\n\t}\r\n\r\n\r\n    \r\n\r\n\t/**\r\n\t \tInit\r\n\t*/\r\n\t\r\n\tconsole.log(\"profileController initialised\");\r\n\t$scope.pageClass = 'page-profile';\r\n\r\n\t//Boolean used if user enters /profile directly and auth doesn't have time to complete\r\n\tvar authed = false;\r\n\r\n\t//Setup AngularFire 3-way-bindings (online) or read from cache (offline)\r\n\tif( offlineService.isOnline()) {\r\n\t\tconsole.log(\"profileController: Client online\");\r\n\r\n\t\tif(firebase.auth().currentUser != null) {\r\n\t\t\tauthed = true;\r\n\t\t\tcreateFirebaseBindingsObject(\"syncObjectProfile\");\r\n\t\t}\r\n\r\n\t}  \r\n\telse {\r\n\t\tconsole.log(\"profileController: Client offline\");\r\n\t\t$scope.syncObjectProfile = offlineService.getCachedProfile();\r\n\t}\r\n\r\n});","app.directive('back', ['$window', function($window) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, elem, attrs) {\r\n                elem.bind('click', function () {\r\n                    $window.history.back();\r\n                });\r\n            }\r\n        };\r\n    }]);","/* \r\nAttach a key code to a controller function.\r\nUsage: <input id=\"password\" bind-key=\"onLoginClicked()\" key=\"13\"/>\r\nhttp://stackoverflow.com/a/17364716 \r\n*/\r\napp.directive('bindKey', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === Number(attrs.key)) {\r\n                scope.$apply(function(){\r\n                    scope.$eval(attrs.bindKey, {'event': event});\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});","app.directive('decimalInput', function() {\r\n  return {\r\n    require: '?ngModel',\r\n    link: function(scope, element, attrs, ngModelCtrl) {\r\n      if(!ngModelCtrl) {\r\n        return; \r\n      }\r\n\r\n      ngModelCtrl.$parsers.push(function(val) {\r\n        if (angular.isUndefined(val)) {\r\n            var val = '';\r\n        }\r\n        var clean = val.replace(/[^0-9\\.]/g, '');\r\n        \r\n        var decimalCheck = clean.split('.');\r\n\r\n        if(!angular.isUndefined(decimalCheck[1])) {\r\n            decimalCheck[1] = decimalCheck[1].slice(0,2);\r\n            clean =decimalCheck[0] + '.' + decimalCheck[1];\r\n        }\r\n\r\n        if (val !== clean) {\r\n          ngModelCtrl.$setViewValue(clean);\r\n          ngModelCtrl.$render();\r\n        }\r\n        if( isNaN(f) ) f = 0;\r\n\r\n        var f = parseFloat(clean);\r\n        return f;\r\n      });\r\n\r\n      element.bind('keypress', function(event) {\r\n        if(event.keyCode === 32) {\r\n          event.preventDefault();\r\n        }\r\n      });\r\n    }\r\n  };\r\n})\r\n\r\n//Shows typed letters, but removes them.\r\n//Both command and dot are allowed\r\n.directive('onlyFloats', function () {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        require: '?ngModel',\r\n        link: function (scope, element, attrs, modelCtrl) {\r\n            modelCtrl.$parsers.push(function (inputValue) {\r\n                if (inputValue == undefined) return '';\r\n\r\n                modelCtrl.$setViewValue(String(inputValue).replace(/,/g, '.')); //this line updates view, but it doesnt :/\r\n                inputValue = String(inputValue).replace(/,/g, '.');\r\n\r\n                var transformedInput = inputValue.replace(/[^0-9\\.]/g, '');\r\n                if (transformedInput !== inputValue) {\r\n                    modelCtrl.$setViewValue(transformedInput);\r\n                    modelCtrl.$render();\r\n                }\r\n                var floated = parseFloat(transformedInput);\r\n                if(_.isNaN(floated)) floated = 0;\r\n                return floated ;\r\n            });\r\n        }\r\n    };\r\n});","filters.filter('numberFixedLen', function () {\r\n    return function (n, len) {\r\n        var num = parseInt(n, 10);\r\n        len = parseInt(len, 10);\r\n        if (isNaN(num) || isNaN(len)) {\r\n            return n;\r\n        }\r\n        num = ''+num;\r\n        while (num.length < len) {\r\n            num = '0'+num;\r\n        }\r\n        return num;\r\n    };\r\n});\r\n\r\n\r\n ","/**\r\n\tConfigure the Routes\r\n*/\r\n\r\napp.config(function($routeProvider, $locationProvider) {\r\n\r\n\t//Exclude from ng/animation\t\r\n\t//$animateProvider.classNameFilter(/^((?!(picker-day)).)*$/); //To add several classes use pipe operator: elOrClass1|elOrClass2\r\n\r\n\tvar titleSep = \"|\";\r\n\tvar titleApp = \"Angular Template\";\r\n\r\n\t//Note. Dont ever route to index ;-)\t\r\n\t//Note. There can only be one ng-view, so initially decide whether to apply it to the whole page or for the content container\t\r\n\t$routeProvider\r\n\t\t.when(\"/\", {\r\n\t\t\tcontroller: \"loginController\",\r\n\t\t\ttitle: \"Login \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"login.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\r\n\t\t.when(\"/register\", {\r\n\t\t\tcontroller: \"loginController\",\r\n\t\t\ttitle: \"Login \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"register.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\r\n\t\t.when(\"/login\", {\r\n\t\t\tcontroller: \"loginController\",\r\n\t\t\ttitle: \"Login \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"login.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\r\n\t\t.when(\"/forgot\", {\r\n\t\t\tcontroller: \"loginController\",\r\n\t\t\ttitle: \"Login \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"forgot.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\r\n\t\t.when(\"/profile\", {\r\n\t\t\tcontroller: \"profileController\",\r\n\t\t\ttitle: \"Profile \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"profile.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\t\t\r\n\t\t.when(\"/items\", {\r\n\t\t\tcontroller: \"itemsController\",\r\n\t\t\ttitle: \"Items \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"items.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\t\t\r\n\t\t.when(\"/items/:itemId\", {\r\n\t\t\tcontroller: \"itemController\",\r\n\t\t\ttitle: \"Items \" + titleSep + \" \" + titleApp,\r\n\t\t\ttemplateUrl: \"item.html\",\r\n\t        reloadOnSearch: false\r\n\t    })\r\n\t\t\r\n\t\t// else 404\r\n\t\t//.otherwise(\"/404\", {templateUrl: \"item.html\"});\r\n\t\t.otherwise( {\r\n\t        redirectTo: \"/login\"\r\n\t    });\r\n\r\n    $locationProvider.html5Mode(true);\r\n})\r\n\r\n//Update page title on route change\r\napp.run([\"$rootScope\", \"$route\", function($rootScope, $route) {\r\n    $rootScope.$on(\"$routeChangeSuccess\", function() {\r\n        document.title = $route.current.title;\r\n    });\r\n}]);","services.service(\"dbService\", function($http, $q, eventService) {\r\n\r\n\r\n\tvar svc = {};\r\n\r\n\t/**\r\n\t\tFirebase ref\r\n\t*/\r\n\r\n\tvar dbRef = function(key) {\r\n\t\treturn firebase.database().ref(key);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tFirebase API access via server\r\n\t*/\r\n\r\n\t// Upon registration using Google Auth, let backend server save user data to own Firebase table\r\n\tsvc.register = function(name, email, uid, completedRegistrationCallback, errorCallback) {\r\n\t\tconsole.log(\"DbService: Registering \" + email + \" and all user data with own server\");\r\n\t\tvar data =  {\r\n\t\t\tname : name,\r\n\t\t\temail : email,\r\n\t\t\tuid : uid\r\n\t\t};\r\n\t\t$http.post('/register', data).\r\n\t        success(function(resObj) {\r\n\t            console.log(\"Register posted successfully \" + JSON.stringify(resObj));\r\n\t            completedRegistrationCallback();\r\n\t        }).error(function(resObj) {\r\n\t            console.error(\"Register posting error\" + resObj);\r\n\t            errorCallback();\r\n\t        });\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tFirebase API access from client\r\n\t*/\r\n\r\n\tsvc.getOnce = function(key, type, process, callback){\r\n\t\tconsole.log(\"DbService: Getting once: \" + key);\r\n\t\tdbRef(key).once(type, function(dataSnapshot){\r\n\t\t\tif(process) process(dataSnapshot, callback); \r\n\t\t}, errorFunc);\r\n\t}\r\n\r\n\tsvc.getOnceWithChild = function(key, childKey, childVal, type, process, callback){\r\n\t\tconsole.log(\"DbService: Getting once with childKey \" + childKey + \", childVal \" + childVal);\r\n\t\tdbRef(key).orderByChild(childKey).equalTo(childVal).once(type, function(dataSnapshot){\r\n\t\t\tif(process) process(dataSnapshot, callback);\r\n\t\t}, errorFunc);\r\n\t}\r\n\r\n\r\n\t//Updates existing data array by adding to existing array\r\n\tsvc.updateData = function(key, dataArr, callback){\r\n\t\tconsole.log(\"DbService: Updating \" + key);\r\n\t\tdbRef(key).update(dataArr, function(error){\r\n\t\t\tif(error){\r\n\t\t\t\terrorFunc(error);\r\n\t\t\t}else{\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t//Sets existing data array by removing keys that are not existing anymore\r\n\tsvc.setData = function(key, dataArr, callback){\r\n\t\tconsole.log(\"DbService: Setting at \" + key);\r\n\t\tdbRef(key).set(dataArr, function(error){\r\n\t\t\tif(error){\r\n\t\t\t\terrorFunc(error);\r\n\t\t\t}else{\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t//Push and save the Firebase auto-generated id based on timestamp\r\n\tsvc.pushData = function(key, dataArr, callback){\r\n\t\tconsole.log(\"DbService: Pushing data to \" + key);\r\n\t\tvar dbRef2 = dbRef(key).push();\r\n\t\t//var generatedId = dbRef2.key;\r\n\t\t//dataArr.itemId = generatedId;\r\n\r\n\t\tdbRef2.set(dataArr, function(error) {\r\n\t\t\tif(error){ errorFunc(error); }\r\n\t\t\telse{\r\n\t\t\t\tif(callback) callback(dataArr);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t//Remove\r\n\tsvc.removeData = function(key, callback){\r\n\t\tconsole.log(\"DbService: Removing at \" + key);\r\n\t\tdbRef(key).remove(function(error){\r\n\t\t\tif(error){\r\n\t\t\t\terrorFunc(error);\r\n\t\t\t}else{\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tvar errorFunc = function(errorObject){\r\n\t\tconsole.log(JSON.stringify(errorObject));\r\n\t}\r\n\t\r\n\treturn svc;\r\n\r\n});","services.service(\"eventService\", function($rootScope) {\r\n\t\t\r\n\tthis.broadcast = function(msg, extra) {\r\n\t\t$rootScope.$broadcast(msg, extra);\r\n\t}\r\n\r\n\tthis.listen = function(msg, callback) { \r\n\t\t$rootScope.$on( msg, function(msg, extra) { \r\n\t\t\tcallback(extra) \r\n\t\t});\r\n\t}\r\n\r\n});","services.service(\"offlineService\", function($rootScope, dbService) {\r\n\r\n    var svc = {};\r\n\r\n    /**\r\n        Private helpers\r\n    */\r\n\r\n   \r\n\r\n    /**\r\n        Public functions\r\n    */\r\n\r\n    // Is browser online? \r\n    svc.isOnline = function(){\r\n        return navigator.onLine; \r\n    }\r\n\r\n    // Browsers behave differently regarding navigator.onLine method above.\r\n    // So if we really want to be sure about the state, we send a GET request to a local resource, that is not listed in the cache manifest\r\n    // Note, that this answer is provided async and thus takes a moment to process, so be sure to handle the calling of this method correctly.\r\n    svc.isReallyOnline = function(yes, no){\r\n        var xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHttp');\r\n        xhr.onload = function(){\r\n            if(yes instanceof Function){\r\n                yes();\r\n            }\r\n        }\r\n        xhr.onerror = function(){\r\n            if(no instanceof Function){\r\n                no();\r\n            }\r\n        }\r\n        xhr.open(\"GET\",\"onlinetester.dont.add.to.cache.manifest\",true);\r\n        xhr.send();\r\n    }\r\n\r\n    svc.setLocalStorage = function(name, obj) {\r\n        window.localStorage.setItem(name, JSON.stringify(obj));\r\n    }\r\n\r\n    svc.getLocalStorage = function(name) {\r\n        return JSON.parse( window.localStorage.getItem(name) );\r\n    }\r\n\r\n    svc.setCachedProfile = function(obj) {\r\n        svc.setLocalStorage(\"profile\", obj);\r\n    }\r\n\r\n    svc.getCachedProfile = function() {\r\n        return svc.getLocalStorage(\"profile\");\r\n    }\r\n\r\n    svc.setCachedItems = function(obj) {\r\n        svc.setLocalStorage(\"items\", obj);\r\n    }\r\n\r\n    svc.getCachedItems = function() {\r\n        return svc.getLocalStorage(\"items\");\r\n    }\r\n\r\n\r\n    return svc;\r\n});\r\n","services.service(\"uploadService\", function(eventService) {\r\n\r\n\tvar svc = {};\r\n\r\n\t/**\r\n\t\tFirebase ref\r\n\t*/\r\n\r\n\tvar storageRef = function() {\r\n\t\treturn firebase.storage().ref();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t\tFirebase API access from client\r\n\t*/\r\n\r\n\tsvc.uploadImageToFirebaseStorage = function(file, filename, dir, succeessCallback, errorCallback, progressCallback) {\r\n\r\n        console.log(\"uploadController: Uploading to Firebase storage: \" + filename + \" to \" + dir);\r\n\r\n        //Get ref for new firebase storage location\r\n\t\tvar uploadRef = storageRef().child(dir + \"/\" + filename);\r\n\t\t\r\n\t\t//Define internal callbacks\r\n\t\tvar onProgress = function(snapshot) {\r\n\t\t\t\r\n\t\t\tvar prog = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n\t\t\tif(progressCallback) progressCallback(prog);\r\n\r\n\t\t\tswitch (snapshot.state) {\r\n\t\t\t\tcase firebase.storage.TaskState.PAUSED: \r\n\t\t\t\t    console.log(\"Upload is PAUSED\");\r\n\t\t\t\t    break;\r\n\t\t\t\tcase firebase.storage.TaskState.RUNNING:\r\n\t\t\t\t    console.log(\"Upload is RUNNING\");\r\n\t\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar onError = function(error) {\r\n\t\t\tif(errorCallback) errorCallback(error);\r\n\t\t}\r\n\t\tvar onSuccess = function() {\r\n\t\t\tvar url = uploadTask.snapshot.downloadURL;\r\n\t\t\tif(succeessCallback) succeessCallback(url, filename);\r\n\t\t\r\n\t\t}\r\n\r\n\t\t//Upload file to Firebase\r\n\t\tuploadTask = uploadRef.put(file);\r\n\r\n\t\t//Monitor progress\r\n\t\tuploadTask.on('state_changed', onProgress, onError, onSuccess);\r\n\r\n\t}\r\n\t\r\n\treturn svc;\r\n\r\n});"]}